/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin processor.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"


//==============================================================================
ImpleAudioProcessor::ImpleAudioProcessor() :
	bang(0)
{
	addParameter(new AudioParameterBool("blockAlign", "blockAlign", true));
	addParameter(new AudioParameterBool("phaseInvert", "phaseInvert", false));
	addParameter(new AudioParameterBool("hold", "phaseInvert", false));
	addParameter(new AudioParameterFloat("gain", "gain", NormalisableRange<float>(0.0f, 1.0f, 0.01f), 1.0f));
}

ImpleAudioProcessor::~ImpleAudioProcessor()
{
}

//==============================================================================
const String ImpleAudioProcessor::getName() const
{
    return JucePlugin_Name;
}

const String ImpleAudioProcessor::getInputChannelName (int channelIndex) const
{
    return String (channelIndex + 1);
}

const String ImpleAudioProcessor::getOutputChannelName (int channelIndex) const
{
    return String (channelIndex + 1);
}

bool ImpleAudioProcessor::isInputChannelStereoPair (int index) const
{
    return true;
}

bool ImpleAudioProcessor::isOutputChannelStereoPair (int index) const
{
    return true;
}

bool ImpleAudioProcessor::acceptsMidi() const
{
   #if JucePlugin_WantsMidiInput
    return true;
   #else
    return false;
   #endif
}

bool ImpleAudioProcessor::producesMidi() const
{
   #if JucePlugin_ProducesMidiOutput
    return true;
   #else
    return false;
   #endif
}

bool ImpleAudioProcessor::silenceInProducesSilenceOut() const
{
    return false;
}

double ImpleAudioProcessor::getTailLengthSeconds() const
{
    return 0.0;
}

int ImpleAudioProcessor::getNumPrograms()
{
    return 1;   // NB: some hosts don't cope very well if you tell them there are 0 programs,
                // so this should be at least 1, even if you're not really implementing programs.
}

int ImpleAudioProcessor::getCurrentProgram()
{
    return 0;
}

void ImpleAudioProcessor::setCurrentProgram (int index)
{
}

const String ImpleAudioProcessor::getProgramName (int index)
{
    return String();
}

void ImpleAudioProcessor::changeProgramName (int index, const String& newName)
{
}

//==============================================================================
void ImpleAudioProcessor::prepareToPlay (double sampleRate, int samplesPerBlock)
{
    // Use this method as the place to do any pre-playback
    // initialisation that you need..
}

void ImpleAudioProcessor::releaseResources()
{
    // When playback stops, you can use this as an opportunity to free up any
    // spare memory, etc.
}

void ImpleAudioProcessor::processBlock (AudioSampleBuffer& buffer, MidiBuffer& midiMessages)
{
	bool blockAlign = getParameter(ParameterId::blockAlign) > 0.0f ? true : false;
	bool phaseInvert = getParameter(ParameterId::phaseInvert) > 0.0f ? true : false;
	bool hold = getParameter(ParameterId::hold) > 0.0f ? true : false;
	float gain = getParameter(ParameterId::gain);
	bool letsGo = bang.get() > 0 ? true : false;

	if (phaseInvert) {
		gain *= -1.0f;
	}

	// clear out garbage
	for (int i = getNumInputChannels(); i < getNumOutputChannels(); ++i)
		buffer.clear(i, 0, buffer.getNumSamples());

	// process MIDI
	MidiBuffer::Iterator midiIterator(midiMessages);
	MidiMessage midiCurrent;
	int midiCurrentSample = 0;
	while (midiIterator.getNextEvent(midiCurrent, midiCurrentSample)) {
		if (midiCurrent.isNoteOn()) {
			if (blockAlign) {
				for (int channel = 0; channel < getNumOutputChannels(); ++channel) {
					buffer.setSample(channel, 0, gain);
				}
				break;
			}
			else {
				for (int channel = 0; channel < getNumOutputChannels(); ++channel) {
					buffer.setSample(channel, midiCurrentSample, gain);
				}
			}
		}
	}
	midiMessages.clear();

	// process button clicks
	if (hold || letsGo) {
		for (int channel = 0; channel < getNumOutputChannels(); ++channel) {
			buffer.setSample(channel, 0, gain);
		}
		bang.set(0);
	}
}

//==============================================================================
bool ImpleAudioProcessor::hasEditor() const
{
    return true; // (change this to false if you choose to not supply an editor)
}

AudioProcessorEditor* ImpleAudioProcessor::createEditor()
{
    return new ImpleAudioProcessorEditor (*this);
}

//==============================================================================
void ImpleAudioProcessor::getStateInformation (MemoryBlock& destData)
{
    // You should use this method to store your parameters in the memory block.
    // You could do that either as raw data, or use the XML or ValueTree classes
    // as intermediaries to make it easy to save and load complex data.
}

void ImpleAudioProcessor::setStateInformation (const void* data, int sizeInBytes)
{
    // You should use this method to restore your parameters from this memory block,
    // whose contents will have been created by the getStateInformation() call.
}

void ImpleAudioProcessor::fire() {
	bang.set(1);
}

//==============================================================================
// This creates new instances of the plugin..
AudioProcessor* JUCE_CALLTYPE createPluginFilter()
{
    return new ImpleAudioProcessor();
}
